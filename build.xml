<?xml version="1.0"?>


<project name="workshop" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        Ant/ivy based build.xml file for the workshop. Needs ant to run
    </description>

    <property name="version"               value="1.0"/>
    <property name="root.dir"              value="${basedir}"/>
    <property name="src.dir"               value="${root.dir}/src"/>
    <property name="compile.dir"           value="${root.dir}/classes"/>
    <property name="lib.dir"               value="${root.dir}/lib"/>
    <property name="dist.dir"              value="${root.dir}/dist"/>
    <property name="tmp.dir"               value="${root.dir}/tmp"/>
    <property name="javadoc.dir"           value="${dist.dir}/javadoc"/>
    <property name="conf.dir"              value="${root.dir}/conf"/>
    <property name="bin.dir"               value="${root.dir}/bin"/>
    <property name="slides.dir"            value="${root.dir}/slides"/>
    <property name="javadoc.packages"      value="org.task.*"/>
    <property name="timestamp"             value=".timestamp"/>
    <property name="maven.executable"      value="mvn"/>
    <property name="git.executable"        value="git"/>
    <property name="asciidoc.executable"   value="asciidoctor"/>
    <property name="asciidoc.backends"     value="asciidoctor-deck.js"/>
    <property name="asciidoc.backends.dir" value="${basedir}/../${asciidoc.backends}"/>
    <property name="asciidoc.backends.url" value="git://github.com/asciidoctor/asciidoctor-deck.js"/>
    <property name="deck.js"               value="deck.js"/>
    <property name="deck.js.dir"           value="${basedir}/../${deck.js}"/>
    <property name="deck.js.url"           value="git://github.com/imakewebthings/deck.js.git"/>
    <property name="ivy.version"           value="2.4.0" />


    <path id="jg.classpath">
        <pathelement location="${compile.dir}"/>
        <pathelement location="${conf.dir}"/>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>


    <target name="check-lib-exists">
        <available file="${lib.dir}" type="dir" property="lib.dir.exists"/>
    </target>


    <target name="check-ivy-exists">
        <mkdir dir="${lib.dir}"/>
        <pathconvert property="ivy.exists" pathsep=" " setonempty="false">
            <path>
                <fileset dir="${lib.dir}" includes="ivy*.jar" />
            </path>
        </pathconvert>
    </target>

    <target name="check-jars-exist">
        <mkdir dir="${lib.dir}"/>
        <pathconvert property="jars.exist" pathsep=" " setonempty="false">
            <path>
                <fileset dir="${lib.dir}" excludes="ivy*.jar" />
            </path>
        </pathconvert>
    </target>

    <target name="check-asciidoc-backends-exists" description="Checks if asciidoc_backends dir exists">
        <available file="${asciidoc.backends.dir}" type="dir" property="asciidoc.backends.exists"/>
    </target>

    <target name="get-asciidoc-backends" depends="check-asciidoc-backends-exists"
            description="Downloads asciidoc-backends" unless="asciidoc.backends.exists">
        <echo message="downloading ${asciidoc.backends}"/>
        <exec executable="${git.executable}" dir="${basedir}/../">
            <arg line="clone ${asciidoc.backends.url}"/>
        </exec>
    </target>

    <target name="check-deckjs-exists" description="Checks if deck.js dir exists">
        <available file="${deck.js.dir}" type="dir" property="deckjs.exists"/>
    </target>

    <target name="get-deckjs" depends="check-deckjs-exists"
            description="Downloads deck.js and creates a symbolic link to it" unless="deckjs.exists">
        <echo message="downloading ${deck.js} to ${deck.js.dir}"/>
        <exec executable="${git.executable}" dir="${basedir}/../">
            <arg line="clone ${deck.js.url}"/>
        </exec>
        <symlink link="${slides.dir}/${deck.js}" resource="${deck.js.dir}" overwrite="false" failonerror="false"/>
    </target>


    <target name="get-ivy" description="Fetches ivy from a maven repo" depends="check-ivy-exists" unless="ivy.exists">
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"
             dest="${lib.dir}" usetimestamp="true"/>
    </target>


    <target name="retrieve" depends="check-jars-exist,get-ivy,define-ivy-task" unless="jars.exist"
            description="Retrieves all dependent libs defined in ivy.xml unless already present">
        <ivy:retrieve type="jar,bundle,source" transitive="false"/>

        <!-- Move byteman-x.y.z.jar to byteman.jar (needed by -javaagent:byteman.jar in byteman tests) -->
        <move todir="${lib.dir}">
            <fileset dir="${lib.dir}">
                <include name="byteman-*.jar"/>
                <exclude name="byteman-bmunit-*.jar"/>
                <exclude name="byteman-install-*.jar"/>
                <exclude name="byteman-submit-*.jar"/>
            </fileset>
            <globmapper from="byteman*.jar" to="byteman.jar"/>
        </move>
    </target>

    <target name="define-ivy-task">
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="jg.classpath"/>
    </target>

    <target name="prepare" depends="retrieve">
        <property environment="env"/>
        <mkdir dir="${compile.dir}"/>
    </target>


    <target name="compile" depends="prepare" description="Compiles all Java files">
        <javac destdir="${compile.dir}"
               source="1.7"
               target="1.7"
               classpathref="jg.classpath"
               includeantruntime="false"
               debug="on"
               deprecation="off"
               optimize="off"
               listfiles="false"
               includes="org/task/**,org/misc/**,org/lab/**">
            <src path="${src.dir}"/>
        </javac>
    </target>


    <target name="slides" description="Generates the slides using asciidoctor"
            depends="get-asciidoc-backends,get-deckjs">
        <symlink link="${slides.dir}/${deck.js}" resource="${deck.js.dir}" overwrite="false" failonerror="false"/>
        <run-asciidoc dir="${basedir}/slides" input="welcome.adoc"/>
        <run-asciidoc dir="${basedir}/slides" input="admin.adoc"/>
        <run-asciidoc dir="${basedir}/slides" input="advanced.adoc"/>
        <run-asciidoc dir="${basedir}/slides" input="blocks.adoc"/>
        <run-asciidoc dir="${basedir}/slides" input="prot_overview.adoc"/>
        <run-asciidoc dir="${basedir}/slides" input="protocols.adoc"/>
        <run-asciidoc dir="${basedir}/slides" input="using.adoc"/>
        <run-asciidoc dir="${basedir}/slides" input="summary.adoc"/>
    </target>


    <target name="clean"
            description="Removes all class files and ./dist">
        <symlink action="delete" link="${slides.dir}/${deck.js}"/>
        <delete dir="${compile.dir}" failonerror="false"/>
        <delete dir="${dist.dir}" failonerror="false"/>
        <delete dir="${tmp.dir}" failonerror="false"/>
        <delete dir="${slides.dir}/build/"/>
        <delete file="${conf.dir}/MANIFEST.MF" failonerror="false"/>
        <delete>
            <fileset dir="${root.dir}" defaultexcludes="no">
                <include name="**/*~"/>
            </fileset>
            <fileset dir="${basedir}/slides">
                <include name="*.html"/>
            </fileset>
        </delete>
    </target>

    <target name="clean-all" depends="clean" description="Also removes lib">
        <delete dir="${lib.dir}" failonerror="false"/>
    </target>


    <macrodef name="run-asciidoc">
        <attribute name="dir"/>
        <attribute name="input"/>
        <sequential>
            <mkdir dir="@{dir}/build"/>
            <echo message="Processing @{input} in @{dir}"/>
            <exec executable="${asciidoc.executable}" dir="@{dir}">
                <arg line="-T ${asciidoc.backends.dir}/templates/haml @{input}"/>
            </exec>
        </sequential>
    </macrodef>


</project>
